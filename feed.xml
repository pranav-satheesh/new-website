<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://pranav-satheesh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pranav-satheesh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-23T17:27:14+00:00</updated><id>https://pranav-satheesh.github.io/feed.xml</id><title type="html">blank</title><subtitle>Pranav Satheesh&apos;s personal website. </subtitle><entry><title type="html">Visualizing a simple GW chirp signal</title><link href="https://pranav-satheesh.github.io/blog/2022/GW-chirp-signal/" rel="alternate" type="text/html" title="Visualizing a simple GW chirp signal"/><published>2022-01-29T16:40:16+00:00</published><updated>2022-01-29T16:40:16+00:00</updated><id>https://pranav-satheesh.github.io/blog/2022/GW-chirp-signal</id><content type="html" xml:base="https://pranav-satheesh.github.io/blog/2022/GW-chirp-signal/"><![CDATA[<p>The gravitational waveform from inspiralling binaries is known as a <em>chirp waveform</em>. The amplitude and the frequency of the waveform increases with time and hence it is called a chirp (similar to a bird’s chirp). Here I’ll go through the steps to compute a simple waveform for inspiralling binaries in Python.</p> <h2 id="setup">Setup</h2> <p>I will be using <em>Numpy</em> for calculations, <em>Matplotlib</em> for plotting and <em>Astropy</em> for using some constants (like $c, G$). You can install these packages using pip by clicking the link below. (Note that <em>Astropy</em> can be avoided for this exercise and the constant values can be hardcoded directly.)</p> <ul> <li>Numpy installation</li> <li>Matplotlib installation</li> <li>Astropy installation</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">astropy</span> <span class="kn">import</span> <span class="n">constants</span> <span class="k">as</span> <span class="n">const</span>
</code></pre></div></div> <p>Using the <code class="language-plaintext highlighter-rouge">constants</code> module we will define the constants reuired for this computation</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">G</span> <span class="o">=</span> <span class="n">const</span><span class="p">.</span><span class="n">G</span><span class="p">.</span><span class="n">value</span> <span class="c1">#gravitational constant
</span><span class="n">c</span> <span class="o">=</span> <span class="n">const</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">value</span> <span class="c1">#speed of light
</span><span class="n">Msun</span> <span class="o">=</span> <span class="n">const</span><span class="p">.</span><span class="n">M_sun</span><span class="p">.</span><span class="n">value</span>  <span class="c1">#Mass of Sun
</span><span class="n">pc</span> <span class="o">=</span> <span class="n">const</span><span class="p">.</span><span class="n">pc</span><span class="p">.</span><span class="n">value</span> <span class="c1">#parsec
</span><span class="n">Mpc</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="mi">6</span> <span class="o">*</span> <span class="n">pc</span> 
</code></pre></div></div> <h2 id="frequency-evolution">Frequency evolution</h2> <p>Now that we have the setup ready, we will look at the frequency evolution ($f$ vs $t$) for the waveform. From the theory of inspiralling binaries emiting GWs (I’m making a series of posts on that too!) we get $\dot{f}$ as,</p> \[\frac{df}{dt} = \frac{96}{5} \frac{c^3}{G} \frac{f}{M_c} \Bigl( \frac{G}{c^3} \pi f M_c\Bigr)^{8/3}\] <p>where the chirp mass $M_c$ is given by $\frac{(m1 \ m2)^{3/5}}{(m_1 + m_2)^{1/5}}$. This equation can then be integrated to get $t(f)$ :</p> <p>\(t = t_c - \frac{3}{256} \Bigl( \frac{c^3}{G M_c}\Bigr)^{5/3} (\pi f)^{-8/3}\) Here $t_c$ denotes the time of coalescence and it is completely arbitary (We’ll take $t_c = 0$). The equation tells us how close we are to the merger time. This can be now coded u</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="c1">#chirp mass
</span>  <span class="k">def</span> <span class="nf">Mchirp</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">m1</span><span class="o">*</span><span class="n">m2</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">5</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m1</span><span class="o">+</span><span class="n">m2</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">5</span><span class="p">)</span>

  <span class="c1">#parameters
</span>  <span class="n">m1</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">*</span> <span class="n">Msun</span>
  <span class="n">m2</span> <span class="o">=</span> <span class="mi">30</span> <span class="o">*</span> <span class="n">Msun</span>
  <span class="n">Mc</span> <span class="o">=</span> <span class="nc">Mchirp</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">)</span>
  <span class="n">D</span> <span class="o">=</span> <span class="mi">1</span><span class="o">*</span><span class="n">Mpc</span>

  <span class="n">f0</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">#starting frequency
</span>  <span class="n">freq</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="n">f0</span><span class="p">,</span><span class="mi">50</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
  <span class="n">tc</span> <span class="o">=</span> <span class="mf">0.0</span> <span class="c1">#merger time (s)
</span>
  <span class="k">def</span> <span class="nf">tau</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">Mc</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span><span class="mi">3</span><span class="o">/</span><span class="mi">156</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">c</span><span class="o">**</span><span class="mi">3</span><span class="o">/</span><span class="p">(</span><span class="n">G</span><span class="o">*</span><span class="n">Mc</span><span class="p">))</span><span class="o">**</span><span class="p">(</span><span class="mi">5</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">f</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="mi">8</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="mi">4</span>

  <span class="n">time</span> <span class="o">=</span> <span class="n">tc</span> <span class="o">-</span> <span class="nf">tau</span><span class="p">(</span><span class="n">freq</span><span class="p">,</span><span class="n">Mc</span><span class="p">)</span>
</code></pre></div></div> <p>We can now plot $f$ vs $t$ and compare it with the kind of behaviour that you expect from a gravitational waveform.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tduration</span> <span class="o">=</span> <span class="n">time</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">time</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">#duration of the signal
</span><span class="n">torder</span> <span class="o">=</span> <span class="n">time</span> <span class="o">-</span> <span class="n">time</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1">#rearranging the time array such that the t0 = 0 and merger time is tduration
</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">time (s)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">frequency (Hz)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Frequency evolution of binaries</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">()</span>
</code></pre></div></div> <p><img src="/images/blog/fvst.jpg" alt="The frequency evolution for the above binary"/></p> <p>This is similar to the Time–frequency plots that we usualy plot for a detection like the one below for GW190412. The frequency is expected to increase as the GWs are emitted away, the orbital frequency increases.</p> <p align="center"> <img align="center" width="400" height="550" src="https://christopherplberry.files.wordpress.com/2020/04/figures_gw190412-q-transform.png"/> </p> <h2 id="the-chirp-signal">The Chirp Signal</h2> <p>Now that we have plotted the time-frequency plot, the next step would be to visualise the chirp signal. The waveform is define by</p> <ol> <li>Amplitude :</li> </ol> \[\mathcal{A} = 4 \frac{G M_c}{c^2 D} \Bigl( \frac{G}{c^3} \pi f M_c\Bigr)^{8/3}\] <ol> <li>Phase:</li> </ol> \[\phi(t) = 2 \pi \Bigl( f t + \frac{1}{2} \dot{f} t^2 \Bigr) + \phi_{0}\] <p>$\dot{f}$ is defined above and $\phi_{0}$ is the initial phase of the binary. The waveform is then</p> \[h(t) = \mathcal{A} \,cos \phi(t)\] <p>Now for plotting, we will use the above frequency series and using the $t(f)$ we can calculate $t$ which then can be used to compute $\phi(t)$ and in turn $h(t)$.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">Mc</span><span class="p">,</span><span class="n">D</span><span class="p">,</span><span class="n">f</span><span class="p">):</span>
    
    <span class="c1">#Amplitude
</span>    <span class="n">h0</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">Mc</span><span class="o">/</span><span class="n">D</span> <span class="o">*</span> <span class="p">(</span><span class="n">G</span><span class="o">*</span><span class="n">c</span><span class="o">**</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">f</span><span class="o">*</span><span class="n">Mc</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">fdot</span> <span class="o">=</span> <span class="nf">dfdt</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">Mc</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">tc</span> <span class="o">-</span> <span class="nf">tau</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">Mc</span><span class="p">)</span>
    
    <span class="c1">#phase
</span>    <span class="n">phi</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">*</span><span class="n">f</span><span class="o">*</span><span class="n">t</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">*</span><span class="n">fdot</span><span class="o">*</span><span class="n">t</span><span class="o">**</span><span class="mi">2</span><span class="o">+</span><span class="n">phi0</span>
    
    <span class="nf">return </span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">h0</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">cos</span><span class="p">(</span><span class="n">phi</span><span class="p">))</span>

<span class="n">freq</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="n">f0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">5000</span><span class="p">)</span>


<span class="n">t</span><span class="p">,</span><span class="n">hstrain</span> <span class="o">=</span> <span class="nf">h</span><span class="p">(</span><span class="n">Mc</span><span class="p">,</span><span class="n">D</span><span class="p">,</span><span class="n">freq</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">hstrain</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">time(s)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">h(t)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">A simple chirp signal</span><span class="sh">"</span><span class="p">)</span>

</code></pre></div></div> <p><img src="/images/blog/chirp.png" alt="The frequency evolution for the above binary"/></p> <p>This is a simple <em>chirp waveform</em> that we have computed. As you can see the amplitude and the frequency of the waveform increases with time.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="gravitational wave"/><category term="compact binaries"/><category term="inspiral"/><summary type="html"><![CDATA[The gravitational waveform from inspiralling binaries is known as a chirp waveform. The amplitude and the frequency of the waveform increases with time and hence it is called a chirp (similar to a bird’s chirp). Here I’ll go through the steps to compute a simple waveform for inspiralling binaries in Python.]]></summary></entry></feed>